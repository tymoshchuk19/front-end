{"remainingRequest":"/home/canel/Code/front-end/pri-git/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/canel/Code/front-end/pri-git/src/components/GroupForm.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/canel/Code/front-end/pri-git/src/components/GroupForm.vue","mtime":1580143389503},{"path":"/home/canel/Code/front-end/pri-git/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/canel/Code/front-end/pri-git/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/canel/Code/front-end/pri-git/node_modules/vuetify-loader/lib/loader.js","mtime":1574476662000},{"path":"/home/canel/Code/front-end/pri-git/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/canel/Code/front-end/pri-git/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCB7IHZhbGlkYXRpb25NaXhpbiB9IGZyb20gJ3Z1ZWxpZGF0ZSc7CmltcG9ydCB7IHJlcXVpcmVkIH0gZnJvbSAndnVlbGlkYXRlL2xpYi92YWxpZGF0b3JzJzsKaW1wb3J0IHsgVVNFUiwgQVBJIH0gZnJvbSAnLi4vLi4vY29uZmlnL2NvbmZpZyc7CmltcG9ydCBheGlvcyBmcm9tICJheGlvcyI7CgovKmVzbGludC1kaXNhYmxlIG5vLWNvbnNvbGUqLwoKZXhwb3J0IGRlZmF1bHQgewogIG1peGluczogW3ZhbGlkYXRpb25NaXhpbl0sCgogIHZhbGlkYXRpb25zOiB7CiAgICBuYW1lOiB7IHJlcXVpcmVkIH0sCiAgICBkZXNjcmlwdGlvbjogeyByZXF1aXJlZCB9CiAgfSwKCiAgZGF0YTogKCkgPT4gKHsKICAgIG5hbWU6ICcnLAogICAgcnVsZXM6IFt2ID0+ICEhdiB8fCAnQ29udGVudCBpcyByZXF1aXJlZC4nXSwKICAgIGRlc2NyaXB0aW9uOiAnJwogIH0pLAoKICBjb21wdXRlZDogewogICAgbmFtZUVycm9ycyAoKSB7CiAgICAgIGNvbnN0IGVycm9ycyA9IFtdCiAgICAgIGlmICghdGhpcy4kdi5uYW1lLiRkaXJ0eSkgcmV0dXJuIGVycm9ycwogICAgICAhdGhpcy4kdi5uYW1lLnJlcXVpcmVkICYmIGVycm9ycy5wdXNoKCdOYW1lIGlzIHJlcXVpcmVkLicpCiAgICAgIHJldHVybiBlcnJvcnMKICAgIH0KICB9LAoKICBtZXRob2RzOiB7CiAgICBzdWJtaXQgKCkgewogICAgICBheGlvcy5wb3N0KEFQSSArICdncm91cHMvJyAsIHsKICAgICAgICAgIHVzZXJzOiBbIHsgdXNlcjogVVNFUiwgcm9sZTogJ2FkbWluJyB9IF0sCiAgICAgICAgICBuYW1lOiB0aGlzLm5hbWUsCiAgICAgICAgICBkZXNjcmlwdGlvbjogdGhpcy5kZXNjcmlwdGlvbgogICAgfSkKICAgICAgLnRoZW4oKCkgPT4geyAKICAgICAgICB0aGlzLiRlbWl0KCduZXdHcm91cCcpOyAKICAgICAgICB0aGlzLmNsZWFyKCkKICAgICAgfSk7CiAgICB9LAogICAgY2xlYXIgKCkgewogICAgICB0aGlzLiR2LiRyZXNldCgpCiAgICAgIHRoaXMubmFtZSA9ICcnCiAgICAgIHRoaXMuZGVzY3JpcHRpb24gPSAnJwogICAgfSwKICB9Cn0K"},{"version":3,"sources":["GroupForm.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"GroupForm.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <v-card class=\"pr-2 pl-2 pb-2 mb-4\">\n    <form>\n      <v-text-field\n        v-model=\"name\"\n        :error-messages=\"nameErrors\"\n        label=\"Name\"\n        required\n        @input=\"$v.name.$touch()\"\n        @blur=\"$v.name.$touch()\"\n      ></v-text-field>\n      <v-textarea\n        counter\n        outlined\n        v-model=\"description\"\n        label=\"Description\"\n        :rules=\"rules\"\n      ></v-textarea>\n\n      <v-btn class=\"mr-4\" @click=\"submit\">submit</v-btn>\n      <v-btn @click=\"clear\">clear</v-btn>\n    </form>\n  </v-card>\n</template>\n\n\n<script>\n  import { validationMixin } from 'vuelidate';\n  import { required } from 'vuelidate/lib/validators';\n  import { USER, API } from '../../config/config';\n  import axios from \"axios\";\n\n  /*eslint-disable no-console*/\n\n  export default {\n    mixins: [validationMixin],\n\n    validations: {\n      name: { required },\n      description: { required }\n    },\n\n    data: () => ({\n      name: '',\n      rules: [v => !!v || 'Content is required.'],\n      description: ''\n    }),\n\n    computed: {\n      nameErrors () {\n        const errors = []\n        if (!this.$v.name.$dirty) return errors\n        !this.$v.name.required && errors.push('Name is required.')\n        return errors\n      }\n    },\n\n    methods: {\n      submit () {\n        axios.post(API + 'groups/' , {\n            users: [ { user: USER, role: 'admin' } ],\n            name: this.name,\n            description: this.description\n      })\n        .then(() => { \n          this.$emit('newGroup'); \n          this.clear()\n        });\n      },\n      clear () {\n        this.$v.$reset()\n        this.name = ''\n        this.description = ''\n      },\n    }\n  }\n</script>"]}]}