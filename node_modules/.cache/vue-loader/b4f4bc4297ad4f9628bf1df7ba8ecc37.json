{"remainingRequest":"/home/canel/Code/front-end/pri-git/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/canel/Code/front-end/pri-git/src/components/FriendsList.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/canel/Code/front-end/pri-git/src/components/FriendsList.vue","mtime":1580380311957},{"path":"/home/canel/Code/front-end/pri-git/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/canel/Code/front-end/pri-git/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/canel/Code/front-end/pri-git/node_modules/vuetify-loader/lib/loader.js","mtime":1574476662000},{"path":"/home/canel/Code/front-end/pri-git/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/canel/Code/front-end/pri-git/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCi8qIGVzbGludC1kaXNhYmxlIG5vLWNvbnNvbGUgKi8KCmltcG9ydCB7IG1hcFN0YXRlLCBtYXBNdXRhdGlvbnMgfSBmcm9tICJ2dWV4IjsKaW1wb3J0IGF4aW9zIGZyb20gImF4aW9zIjsKaW1wb3J0IHsgQVBJIH0gZnJvbSAiLi4vLi4vY29uZmlnL2NvbmZpZyI7CgpleHBvcnQgZGVmYXVsdCB7CiAgbWV0aG9kczogewogICAgcmVtb3ZlKGZyaWVuZElkKSB7CiAgICAgIGF4aW9zCiAgICAgICAgLnBvc3QoYCR7QVBJfXVzZXJzLyR7ZnJpZW5kSWR9L3JlbW92ZWApCiAgICAgICAgLnRoZW4oKHsgZGF0YSB9KSA9PiB0aGlzLnNldFVzZXIoeyB1c2VyOiBkYXRhIH0pKTsKICAgIH0sCiAgICBhY2NlcHQoZnJpZW5kSWQpIHsKICAgICAgYXhpb3MKICAgICAgICAucG9zdChgJHtBUEl9dXNlcnMvJHtmcmllbmRJZH0vYWNjZXB0YCkKICAgICAgICAudGhlbigoeyBkYXRhIH0pID0+IHRoaXMuc2V0VXNlcih7IHVzZXI6IGRhdGEgfSkpOwogICAgfSwKICAgIHJlamVjdChmcmllbmRJZCkgewogICAgICBheGlvcwogICAgICAgIC5wb3N0KGAke0FQSX11c2Vycy8ke2ZyaWVuZElkfS9yZWplY3RgKQogICAgICAgIC50aGVuKCh7IGRhdGEgfSkgPT4gdGhpcy5zZXRVc2VyKHsgdXNlcjogZGF0YSB9KSk7CiAgICB9LAogICAgLi4ubWFwTXV0YXRpb25zKFsic2V0VXNlciJdKQogIH0sCiAgY29tcHV0ZWQ6IHsKICAgIC4uLm1hcFN0YXRlKFsidXNlciJdKQogIH0KfTsK"},{"version":3,"sources":["FriendsList.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqCA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"FriendsList.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"ml-10\">\n    <h3>Pending</h3>\n    <v-card v-for=\"friend in user.pending\" v-bind:key=\"friend._id\" class=\"mt-1\">\n      <v-list-item>\n        <v-list-item-avatar size=\"10\" color=\"green\"></v-list-item-avatar>\n        <v-list-item-avatar color=\"grey\">\n          <img :src=\"friend.image\" />\n        </v-list-item-avatar>\n        <v-list-item>{{friend.nome}}</v-list-item>\n        <v-btn icon color=\"primary\" @click=\"() => accept(friend._id)\">\n          <v-icon size=\"30\">mdi-check-circle</v-icon>\n        </v-btn>\n\n        <v-btn icon color=\"red\" @click=\"() => reject(friend._id)\">\n          <v-icon size=\"30\">mdi-close-circle</v-icon>\n        </v-btn>\n      </v-list-item>\n    </v-card>\n    <v-divider></v-divider>\n    <h3>Friends</h3>\n    <v-card v-for=\"friend in user.friends\" v-bind:key=\"friend._id\" class=\"mt-1\">\n      <v-list-item>\n        <v-list-item-avatar size=\"10\" color=\"green\"></v-list-item-avatar>\n        <v-list-item-avatar color=\"grey\">\n          <img :src=\"friend.image\" />\n        </v-list-item-avatar>\n        <v-list-item>{{friend.nome}}</v-list-item>\n        <v-btn icon color=\"red\" @click=\"() => remove(friend._id)\">\n          <v-icon size=\"30\">mdi-close-circle</v-icon>\n        </v-btn>\n      </v-list-item>\n    </v-card>\n  </div>\n</template>\n\n<script>\n/* eslint-disable no-console */\n\nimport { mapState, mapMutations } from \"vuex\";\nimport axios from \"axios\";\nimport { API } from \"../../config/config\";\n\nexport default {\n  methods: {\n    remove(friendId) {\n      axios\n        .post(`${API}users/${friendId}/remove`)\n        .then(({ data }) => this.setUser({ user: data }));\n    },\n    accept(friendId) {\n      axios\n        .post(`${API}users/${friendId}/accept`)\n        .then(({ data }) => this.setUser({ user: data }));\n    },\n    reject(friendId) {\n      axios\n        .post(`${API}users/${friendId}/reject`)\n        .then(({ data }) => this.setUser({ user: data }));\n    },\n    ...mapMutations([\"setUser\"])\n  },\n  computed: {\n    ...mapState([\"user\"])\n  }\n};\n</script>\n\n<style>\n</style>"]}]}