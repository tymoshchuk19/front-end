{"remainingRequest":"/workspace/front-end/node_modules/vue-loader/lib/index.js??vue-loader-options!/workspace/front-end/src/views/GroupPage.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/workspace/front-end/src/views/GroupPage.vue","mtime":1580452886527},{"path":"/workspace/front-end/node_modules/css-loader/dist/cjs.js","mtime":1580239220004},{"path":"/workspace/front-end/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1580239220548},{"path":"/workspace/front-end/node_modules/postcss-loader/src/index.js","mtime":1580239220271},{"path":"/workspace/front-end/node_modules/vuetify-loader/lib/loader.js","mtime":1580239220578},{"path":"/workspace/front-end/node_modules/cache-loader/dist/cjs.js","mtime":1580239219881},{"path":"/workspace/front-end/node_modules/vue-loader/lib/index.js","mtime":1580239220548}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgpodG1sLiBib2R5IHsKICBoZWlnaHQ6IDEwMCU7Cn0K"},{"version":3,"sources":["GroupPage.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0KA;AACA;AACA","file":"GroupPage.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div class=\"page\">\n    <wm-topbar />\n    <v-row>\n      <v-col cols=\"3\">\n        <wm-groupform @newGroup=\"getGroups\"></wm-groupform>\n        <wm-groups :groups=\"groups\"></wm-groups>\n        <v-divider></v-divider>\n        <v-text-field\n          type=\"text\"\n          v-model=\"newmember\"\n          filled\n          label=\"Add member\"\n          clearable\n        ></v-text-field>\n        <wm-newmembers\n          @newMember=\"() => getMembers()\"\n          :friends=\"filteredFriends\"\n          :perms=\"admin\"\n          :group=\"group_id\"\n        ></wm-newmembers>\n        <v-divider></v-divider>\n        <v-text-field\n          type=\"text\"\n          v-model=\"search\"\n          filled\n          label=\"Group member\"\n          clearable\n        ></v-text-field>\n        <wm-members :members=\"filteredMembers\"></wm-members>\n      </v-col>\n      <v-col cols=\"6\">\n        <wm-header :name=\"group.name\"></wm-header>\n\n        <wm-postform\n          :api=\"postApi\"\n          @newPost=\"() => getPosts($route.params.group_id)\"\n        ></wm-postform>\n        <v-divider class=\"mb-2\"></v-divider>\n        <wm-posts :posts=\"posts\"></wm-posts>\n      </v-col>\n      <v-col cols=\"3\">\n        <wm-taskform\n          v-if=\"admin\"\n          @newTask=\"() => getTasks(group_id)\"\n          :taskApi=\"taskApi\"\n        ></wm-taskform>\n        <wm-tasks\n          :tasks=\"tasks\"\n          :perms=\"admin\"\n          @newTask=\"() => getTasks(group_id)\"\n        ></wm-tasks>\n      </v-col>\n    </v-row>\n    <wm-footer></wm-footer>\n  </div>\n</template>\n\n<script>\n/*eslint-disable no-console*/\n\nimport Posts from \"../components/Posts\";\nimport PostForm from \"../components/PostForm\";\nimport Header from \"../components/Header\";\nimport Tasks from \"../components/Tasks\";\nimport TasksForm from \"../components/TasksForm\";\nimport GroupForm from \"../components/GroupForm\";\nimport Groups from \"../components/Groups\";\nimport TopBarVue from \"../components/TopBar.vue\";\n\nimport { API } from \"../../config/config\";\nimport axios from \"axios\";\nimport Footer from \"../components/Footer\";\nimport Members from \"../components/Members\";\nimport NewMember from \"../components/NewMember\";\nimport { mapState } from \"vuex\";\n\nexport default {\n  components: {\n    \"wm-posts\": Posts,\n    \"wm-postform\": PostForm,\n    \"wm-header\": Header,\n    \"wm-tasks\": Tasks,\n    \"wm-taskform\": TasksForm,\n    \"wm-groupform\": GroupForm,\n    \"wm-groups\": Groups,\n    \"wm-footer\": Footer,\n    \"wm-members\": Members,\n    \"wm-newmembers\": NewMember,\n    \"wm-topbar\": TopBarVue\n  },\n  data() {\n    return {\n      admin: false,\n      path: \"\",\n      search: \"\",\n      members: \"\",\n      newmember: \"\",\n      group: { name: null },\n      posts: null,\n      groups: null,\n      group_id: this.$route.params.group_id,\n      tasks: null,\n      postApi: API + \"groups/\" + this.$route.params.group_id + \"/posts\",\n      taskApi: API + \"groups/\" + this.$route.params.group_id + \"/tasks\"\n    };\n  },\n  watch: {\n    $route: function(to) {\n      this.group_id = to.params.group_id;\n      this.taskApi = API + \"groups/\" + to.params.group_id + \"/tasks\";\n      this.postApi = API + \"groups/\" + to.params.group_id + \"/posts\";\n      this.getGroup(to.params.group_id);\n      this.getGroups();\n      this.getPosts(to.params.group_id);\n      this.getTasks(to.params.group_id);\n    }\n  },\n  methods: {\n    getPosts(group_id) {\n      axios\n        .get(API + \"groups/\" + group_id + \"/posts\")\n        .then(data => (this.posts = data.data.posts));\n    },\n    getGroup(group_id) {\n      axios.get(API + \"groups/\" + group_id).then(data => {\n        this.group = data.data;\n        this.admin = this.group.users.find(obj => {\n          return obj.user._id === this.user._id && obj.role === \"admin\";\n        });\n      });\n    },\n    getGroups() {\n      axios.get(API + \"my/groups\").then(data => (this.groups = data.data));\n    },\n    getMembers() {\n      axios.get(API + \"groups/\" + this.group_id + \"/members\").then(data => {\n        this.members = data.data;\n      });\n    },\n    getTasks(group_id) {\n      axios\n        .get(API + \"groups/\" + group_id + \"/tasks\")\n        .then(data => (this.tasks = data.data));\n    }\n  },\n  mounted() {\n    this.getGroup(this.$route.params.group_id);\n    this.getGroups();\n    this.getMembers();\n    this.getPosts(this.$route.params.group_id);\n    this.getTasks(this.$route.params.group_id);\n  },\n  computed: {\n    filteredMembers: function() {\n      return this.members.filter(member => {\n        return member.user.nome.match(this.search);\n      });\n    },\n    filteredFriends: function() {\n      return this.user.friends.filter(friend => {\n        return friend.nome.match(this.newmember);\n      });\n    },\n    ...mapState([\"user\"])\n  }\n};\n</script>\n\n<style>\nhtml. body {\n  height: 100%;\n}\n</style>\n"]}]}